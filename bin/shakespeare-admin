#!/usr/bin/env python

import cmd
import StringIO

import shakespeare.utils as utils
# must do this before importing anything else as they use GUTINDEX
utils.download_gutenberg_index()
from shakespeare.format import GutenbergShakespeare
from shakespeare.concordancer import make_concordancer
import shakespeare.work

class ShakespeareAdmin(cmd.Cmd):

    prompt = 'The Bard > '

    def __init__(self):
        cmd.Cmd.__init__(self) # cmd.Cmd is not a new style class
        self._index = shakespeare.work.index.all

    def do_format(self, line=None):
        path = sys.argv[1]
        x = GutenbergShakespeare(file(path))
        print x.extract_text()
    
    def help_format(self, line=None):
        usage = \
'''Format a raw gutenberg text.

Take a raw gutenberg text in and return (on stdout) the core text (i.e. strip
out all the gutenberg bumpf)'''
        print usage

    def do_format_all(self, line):
        index = self._index 
        for item in index:
            url = item[1]
            src = utils.get_local_path(url)
            dest = utils.get_local_path(url, 'cleaned')
            infile = file(src)
            if src.endswith('wssnt10.txt'): # if it is the sonnets need a hack
                # delete last 140 characters
                tmp1 = infile.read()
                infile = StringIO.StringIO(tmp1[:-120])
            formatter = GutenbergShakespeare(infile)
            ff = file(dest, 'w')
            out = formatter.extract_text()
            ff.write(out)
            ff.close()
    
    def do_download_texts(self, line):
        for item in self._index:
            utils.download_url(item[1])

    def help_download_texts(self, line=None):
        usage = \
"""
Download from Project Gutenberg all the shakespeare texts listed in the index."""
        print usage 
    
    def do_print_index(self, line):
        for row in self._index:
            print row

    def help_print_index(self, line=None):
        usage = \
'''Print index of Shakespeare texts to stdout'''
        print usage

    def do_make_concordancer(self, line=None):
        if line is not None:
            textsToAdd = []
            textsUrls = line.split()
            for item in self._index:
              if item[1] in textsUrls:
                  textsToAdd.append(item)
            make_concordancer(textsToAdd)
        else:
            make_concordancer()

    def help_make_concordancer(self, line=None):
        print make_concordance.__doc__

    def run_interactive(self, line=None):
        """Run an interactive session.
        """
        print 'Welcome to shakespeare-admin interactive mode\n'
        self.do_about()
        print 'Type:  "?" or "help" for help on commands.\n'
        while 1:
            try:
                self.cmdloop()
                break
            except KeyboardInterrupt:
                raise

    def do_help(self, line=None):
        cmd.Cmd.do_help(self, line)

    def do_about(self, line=None):
        import shakespeare
        version = shakespeare.__version__
        about = \
'''Open Shakespeare version %s. Copyright the Open Knowledge Foundation.
Open Shakespeare is open-knowledge and open-source. See COPYING for details.
''' % version
        print about

    def do_quit(self, line=None):
        sys.exit()

    def do_EOF(self, *args):
        print ''
        sys.exit()

if __name__ == '__main__':
    import sys
    adminCmd = ShakespeareAdmin()
    if len(sys.argv) < 2:
        adminCmd.run_interactive()
    else:
        args = ' '.join(sys.argv[1:])
        args = args.replace('-','_')
        adminCmd.onecmd(args)
